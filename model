{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "81d090bd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:37.088707Z",
     "iopub.status.busy": "2024-05-17T00:40:37.088180Z",
     "iopub.status.idle": "2024-05-17T00:40:39.341741Z",
     "shell.execute_reply": "2024-05-17T00:40:39.340374Z"
    },
    "papermill": {
     "duration": 2.274971,
     "end_time": "2024-05-17T00:40:39.344648",
     "exception": false,
     "start_time": "2024-05-17T00:40:37.069677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c326c8fa",
   "metadata": {
    "papermill": {
     "duration": 0.014709,
     "end_time": "2024-05-17T00:40:39.374353",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.359644",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5fd885e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:39.405714Z",
     "iopub.status.busy": "2024-05-17T00:40:39.405194Z",
     "iopub.status.idle": "2024-05-17T00:40:39.489127Z",
     "shell.execute_reply": "2024-05-17T00:40:39.487973Z"
    },
    "papermill": {
     "duration": 0.102502,
     "end_time": "2024-05-17T00:40:39.491658",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.389156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>society</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Super built-up  Area</td>\n",
       "      <td>19-Dec</td>\n",
       "      <td>Electronic City Phase II</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>Coomee</td>\n",
       "      <td>1056</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>39.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Chikka Tirupathi</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>Theanmp</td>\n",
       "      <td>2600</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>120.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Uttarahalli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1440</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>62.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Super built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Lingadheeranahalli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>Soiewre</td>\n",
       "      <td>1521</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>95.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Super built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Kothanur</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1200</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>51.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              area_type   availability                  location       size  \\\n",
       "0  Super built-up  Area         19-Dec  Electronic City Phase II      2 BHK   \n",
       "1            Plot  Area  Ready To Move          Chikka Tirupathi  4 Bedroom   \n",
       "2        Built-up  Area  Ready To Move               Uttarahalli      3 BHK   \n",
       "3  Super built-up  Area  Ready To Move        Lingadheeranahalli      3 BHK   \n",
       "4  Super built-up  Area  Ready To Move                  Kothanur      2 BHK   \n",
       "\n",
       "   society total_sqft  bath  balcony   price  \n",
       "0  Coomee        1056   2.0      1.0   39.07  \n",
       "1  Theanmp       2600   5.0      3.0  120.00  \n",
       "2      NaN       1440   2.0      3.0   62.00  \n",
       "3  Soiewre       1521   3.0      1.0   95.00  \n",
       "4      NaN       1200   2.0      1.0   51.00  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/banglore-house-price-data/bengaluru_house_prices.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eebe2a0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:39.525015Z",
     "iopub.status.busy": "2024-05-17T00:40:39.524400Z",
     "iopub.status.idle": "2024-05-17T00:40:39.530370Z",
     "shell.execute_reply": "2024-05-17T00:40:39.529488Z"
    },
    "papermill": {
     "duration": 0.024573,
     "end_time": "2024-05-17T00:40:39.532488",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.507915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13320, 9)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2d238e99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:39.565603Z",
     "iopub.status.busy": "2024-05-17T00:40:39.564544Z",
     "iopub.status.idle": "2024-05-17T00:40:39.580374Z",
     "shell.execute_reply": "2024-05-17T00:40:39.579243Z"
    },
    "papermill": {
     "duration": 0.034997,
     "end_time": "2024-05-17T00:40:39.582881",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.547884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "area_type\n",
       "Super built-up  Area    8790\n",
       "Built-up  Area          2418\n",
       "Plot  Area              2025\n",
       "Carpet  Area              87\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"area_type\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1178f653",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:39.616274Z",
     "iopub.status.busy": "2024-05-17T00:40:39.615436Z",
     "iopub.status.idle": "2024-05-17T00:40:39.636969Z",
     "shell.execute_reply": "2024-05-17T00:40:39.635821Z"
    },
    "papermill": {
     "duration": 0.041074,
     "end_time": "2024-05-17T00:40:39.639384",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.598310",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Electronic City Phase II</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1056</td>\n",
       "      <td>2.0</td>\n",
       "      <td>39.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chikka Tirupathi</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>2600</td>\n",
       "      <td>5.0</td>\n",
       "      <td>120.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Uttarahalli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1440</td>\n",
       "      <td>2.0</td>\n",
       "      <td>62.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Lingadheeranahalli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1521</td>\n",
       "      <td>3.0</td>\n",
       "      <td>95.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kothanur</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1200</td>\n",
       "      <td>2.0</td>\n",
       "      <td>51.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   location       size total_sqft  bath   price\n",
       "0  Electronic City Phase II      2 BHK       1056   2.0   39.07\n",
       "1          Chikka Tirupathi  4 Bedroom       2600   5.0  120.00\n",
       "2               Uttarahalli      3 BHK       1440   2.0   62.00\n",
       "3        Lingadheeranahalli      3 BHK       1521   3.0   95.00\n",
       "4                  Kothanur      2 BHK       1200   2.0   51.00"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop([\"society\",\"area_type\",\"balcony\",\"availability\"], axis=1, inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ee2d9d1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:39.673115Z",
     "iopub.status.busy": "2024-05-17T00:40:39.672301Z",
     "iopub.status.idle": "2024-05-17T00:40:39.688128Z",
     "shell.execute_reply": "2024-05-17T00:40:39.686975Z"
    },
    "papermill": {
     "duration": 0.035708,
     "end_time": "2024-05-17T00:40:39.690836",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.655128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location       1\n",
       "size          16\n",
       "total_sqft     0\n",
       "bath          73\n",
       "price          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "43f751cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:39.724652Z",
     "iopub.status.busy": "2024-05-17T00:40:39.724228Z",
     "iopub.status.idle": "2024-05-17T00:40:39.745793Z",
     "shell.execute_reply": "2024-05-17T00:40:39.744929Z"
    },
    "papermill": {
     "duration": 0.041046,
     "end_time": "2024-05-17T00:40:39.747971",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.706925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location      0\n",
       "size          0\n",
       "total_sqft    0\n",
       "bath          0\n",
       "price         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dropna(inplace=True)\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b3f932bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:39.792293Z",
     "iopub.status.busy": "2024-05-17T00:40:39.791864Z",
     "iopub.status.idle": "2024-05-17T00:40:39.800139Z",
     "shell.execute_reply": "2024-05-17T00:40:39.799374Z"
    },
    "papermill": {
     "duration": 0.027966,
     "end_time": "2024-05-17T00:40:39.802212",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.774246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2 BHK', '4 Bedroom', '3 BHK', '4 BHK', '6 Bedroom', '3 Bedroom',\n",
       "       '1 BHK', '1 RK', '1 Bedroom', '8 Bedroom', '2 Bedroom',\n",
       "       '7 Bedroom', '5 BHK', '7 BHK', '6 BHK', '5 Bedroom', '11 BHK',\n",
       "       '9 BHK', '9 Bedroom', '27 BHK', '10 Bedroom', '11 Bedroom',\n",
       "       '10 BHK', '19 BHK', '16 BHK', '43 Bedroom', '14 BHK', '8 BHK',\n",
       "       '12 Bedroom', '13 BHK', '18 Bedroom'], dtype=object)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"size\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7a7745ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:39.837465Z",
     "iopub.status.busy": "2024-05-17T00:40:39.836985Z",
     "iopub.status.idle": "2024-05-17T00:40:39.869411Z",
     "shell.execute_reply": "2024-05-17T00:40:39.868116Z"
    },
    "papermill": {
     "duration": 0.053514,
     "end_time": "2024-05-17T00:40:39.872007",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.818493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>price</th>\n",
       "      <th>bhk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Electronic City Phase II</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1056</td>\n",
       "      <td>2.0</td>\n",
       "      <td>39.07</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chikka Tirupathi</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>2600</td>\n",
       "      <td>5.0</td>\n",
       "      <td>120.00</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Uttarahalli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1440</td>\n",
       "      <td>2.0</td>\n",
       "      <td>62.00</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Lingadheeranahalli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1521</td>\n",
       "      <td>3.0</td>\n",
       "      <td>95.00</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kothanur</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1200</td>\n",
       "      <td>2.0</td>\n",
       "      <td>51.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   location       size total_sqft  bath   price  bhk\n",
       "0  Electronic City Phase II      2 BHK       1056   2.0   39.07    2\n",
       "1          Chikka Tirupathi  4 Bedroom       2600   5.0  120.00    4\n",
       "2               Uttarahalli      3 BHK       1440   2.0   62.00    3\n",
       "3        Lingadheeranahalli      3 BHK       1521   3.0   95.00    3\n",
       "4                  Kothanur      2 BHK       1200   2.0   51.00    2"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"bhk\"]= df[\"size\"].apply(lambda x:int(x.split(\" \")[0]))\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6948a688",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:39.907942Z",
     "iopub.status.busy": "2024-05-17T00:40:39.907210Z",
     "iopub.status.idle": "2024-05-17T00:40:39.920546Z",
     "shell.execute_reply": "2024-05-17T00:40:39.919501Z"
    },
    "papermill": {
     "duration": 0.034555,
     "end_time": "2024-05-17T00:40:39.923719",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.889164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>price</th>\n",
       "      <th>bhk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1718</th>\n",
       "      <td>2Electronic City Phase II</td>\n",
       "      <td>27 BHK</td>\n",
       "      <td>8000</td>\n",
       "      <td>27.0</td>\n",
       "      <td>230.0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4684</th>\n",
       "      <td>Munnekollal</td>\n",
       "      <td>43 Bedroom</td>\n",
       "      <td>2400</td>\n",
       "      <td>40.0</td>\n",
       "      <td>660.0</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       location        size total_sqft  bath  price  bhk\n",
       "1718  2Electronic City Phase II      27 BHK       8000  27.0  230.0   27\n",
       "4684                Munnekollal  43 Bedroom       2400  40.0  660.0   43"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.bhk>20]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c25e91e4",
   "metadata": {
    "papermill": {
     "duration": 0.017707,
     "end_time": "2024-05-17T00:40:39.959216",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.941509",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**the second one seems to be an outlier data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e9d1ac3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:39.995604Z",
     "iopub.status.busy": "2024-05-17T00:40:39.994678Z",
     "iopub.status.idle": "2024-05-17T00:40:40.003329Z",
     "shell.execute_reply": "2024-05-17T00:40:40.002085Z"
    },
    "papermill": {
     "duration": 0.030049,
     "end_time": "2024-05-17T00:40:40.005908",
     "exception": false,
     "start_time": "2024-05-17T00:40:39.975859",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['1056', '2600', '1440', ..., '1133 - 1384', '774', '4689'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.total_sqft.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6233dcfa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.042688Z",
     "iopub.status.busy": "2024-05-17T00:40:40.041228Z",
     "iopub.status.idle": "2024-05-17T00:40:40.047700Z",
     "shell.execute_reply": "2024-05-17T00:40:40.046363Z"
    },
    "papermill": {
     "duration": 0.027777,
     "end_time": "2024-05-17T00:40:40.050611",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.022834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def is_float(x):\n",
    "    try:\n",
    "        float(x)\n",
    "    except:\n",
    "        return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0df0df72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.086757Z",
     "iopub.status.busy": "2024-05-17T00:40:40.086357Z",
     "iopub.status.idle": "2024-05-17T00:40:40.100979Z",
     "shell.execute_reply": "2024-05-17T00:40:40.100047Z"
    },
    "papermill": {
     "duration": 0.035267,
     "end_time": "2024-05-17T00:40:40.103175",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.067908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(190, 6)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[~df[\"total_sqft\"].apply(is_float)].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "df119717",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.140251Z",
     "iopub.status.busy": "2024-05-17T00:40:40.138929Z",
     "iopub.status.idle": "2024-05-17T00:40:40.146078Z",
     "shell.execute_reply": "2024-05-17T00:40:40.145130Z"
    },
    "papermill": {
     "duration": 0.028198,
     "end_time": "2024-05-17T00:40:40.148629",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.120431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def convert_to_float(x):\n",
    "    if is_float(x):\n",
    "        return x\n",
    "    tokens = x.split(\" - \")\n",
    "    if len(tokens) == 2:\n",
    "        return (float(tokens[0]) + float(tokens[1]))/2\n",
    "    try:\n",
    "        return float(x)\n",
    "    except:\n",
    "        return None\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b0f47a0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.185288Z",
     "iopub.status.busy": "2024-05-17T00:40:40.184482Z",
     "iopub.status.idle": "2024-05-17T00:40:40.201791Z",
     "shell.execute_reply": "2024-05-17T00:40:40.200135Z"
    },
    "papermill": {
     "duration": 0.038761,
     "end_time": "2024-05-17T00:40:40.204383",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.165622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13246, 6)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['total_sqft'] = df[\"total_sqft\"].apply(convert_to_float)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc044018",
   "metadata": {
    "papermill": {
     "duration": 0.016862,
     "end_time": "2024-05-17T00:40:40.238318",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.221456",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1971896d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.274498Z",
     "iopub.status.busy": "2024-05-17T00:40:40.274016Z",
     "iopub.status.idle": "2024-05-17T00:40:40.288383Z",
     "shell.execute_reply": "2024-05-17T00:40:40.287458Z"
    },
    "papermill": {
     "duration": 0.035467,
     "end_time": "2024-05-17T00:40:40.290958",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.255491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location\n",
       "Whitefield                534\n",
       "Sarjapur  Road            392\n",
       "Electronic City           302\n",
       "Kanakpura Road            266\n",
       "Thanisandra               233\n",
       "                         ... \n",
       "Rajarajesheari nagar        1\n",
       "Millers Road                1\n",
       "Pillahalli                  1\n",
       "Yelahanka,MVIT college      1\n",
       "Abshot Layout               1\n",
       "Name: count, Length: 1304, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "location_stats = df[\"location\"].value_counts().sort_values(ascending=False)\n",
    "location_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d4b5277d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.328257Z",
     "iopub.status.busy": "2024-05-17T00:40:40.327525Z",
     "iopub.status.idle": "2024-05-17T00:40:40.336908Z",
     "shell.execute_reply": "2024-05-17T00:40:40.335540Z"
    },
    "papermill": {
     "duration": 0.031188,
     "end_time": "2024-05-17T00:40:40.339712",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.308524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location\n",
       "Mathikere                 9\n",
       "KUDLU MAIN ROAD           9\n",
       "Richmond Town             9\n",
       "Volagerekallahalli        9\n",
       "Ejipura                   9\n",
       "                         ..\n",
       "Rajarajesheari nagar      1\n",
       "Millers Road              1\n",
       "Pillahalli                1\n",
       "Yelahanka,MVIT college    1\n",
       "Abshot Layout             1\n",
       "Name: count, Length: 1051, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "other_loc = location_stats[location_stats<10]\n",
    "other_loc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e4d733b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.376703Z",
     "iopub.status.busy": "2024-05-17T00:40:40.376305Z",
     "iopub.status.idle": "2024-05-17T00:40:40.431774Z",
     "shell.execute_reply": "2024-05-17T00:40:40.430607Z"
    },
    "papermill": {
     "duration": 0.077079,
     "end_time": "2024-05-17T00:40:40.434273",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.357194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "254"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.location = df.location.apply(lambda x: \"other\" if x in other_loc else x)\n",
    "len(df.location.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "64af8fbf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.534355Z",
     "iopub.status.busy": "2024-05-17T00:40:40.533246Z",
     "iopub.status.idle": "2024-05-17T00:40:40.540168Z",
     "shell.execute_reply": "2024-05-17T00:40:40.539245Z"
    },
    "papermill": {
     "duration": 0.090897,
     "end_time": "2024-05-17T00:40:40.542469",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.451572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop([\"size\"], inplace=True, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9c741c7",
   "metadata": {
    "papermill": {
     "duration": 0.017147,
     "end_time": "2024-05-17T00:40:40.577259",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.560112",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Removing Outliers\n",
    "remove the row if sqft/bhk<300 as outlier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4d0d0e94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.614282Z",
     "iopub.status.busy": "2024-05-17T00:40:40.613852Z",
     "iopub.status.idle": "2024-05-17T00:40:40.621774Z",
     "shell.execute_reply": "2024-05-17T00:40:40.620903Z"
    },
    "papermill": {
     "duration": 0.029352,
     "end_time": "2024-05-17T00:40:40.624150",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.594798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.total_sqft = df[\"total_sqft\"].astype(\"float64\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ccc5945a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.661137Z",
     "iopub.status.busy": "2024-05-17T00:40:40.660687Z",
     "iopub.status.idle": "2024-05-17T00:40:40.669807Z",
     "shell.execute_reply": "2024-05-17T00:40:40.668597Z"
    },
    "papermill": {
     "duration": 0.030517,
     "end_time": "2024-05-17T00:40:40.672227",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.641710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12502, 5)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[~(df.total_sqft/df.bhk<300)]\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1eb0f89c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.709440Z",
     "iopub.status.busy": "2024-05-17T00:40:40.709009Z",
     "iopub.status.idle": "2024-05-17T00:40:40.723686Z",
     "shell.execute_reply": "2024-05-17T00:40:40.722752Z"
    },
    "papermill": {
     "duration": 0.036169,
     "end_time": "2024-05-17T00:40:40.725988",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.689819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     12456.000000\n",
       "mean       6308.502826\n",
       "std        4168.127339\n",
       "min         267.829813\n",
       "25%        4210.526316\n",
       "50%        5294.117647\n",
       "75%        6916.666667\n",
       "max      176470.588235\n",
       "Name: price_per_sqft, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"price_per_sqft\"] = df[\"price\"]*100000/df[\"total_sqft\"]\n",
    "df.price_per_sqft.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7254d62b",
   "metadata": {
    "papermill": {
     "duration": 0.017583,
     "end_time": "2024-05-17T00:40:40.761375",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.743792",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**As per guassian figure most values should fall between two standerd deviations, i.e mean +/- std**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1cf38046",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.799323Z",
     "iopub.status.busy": "2024-05-17T00:40:40.798420Z",
     "iopub.status.idle": "2024-05-17T00:40:40.811652Z",
     "shell.execute_reply": "2024-05-17T00:40:40.810462Z"
    },
    "papermill": {
     "duration": 0.035,
     "end_time": "2024-05-17T00:40:40.814236",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.779236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(12502, 6)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(11294, 6)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean = np.mean(df.price_per_sqft)\n",
    "std = np.std(df.price_per_sqft)\n",
    "print(df.shape)\n",
    "df = df[(df.price_per_sqft>=(mean-std))&(df.price_per_sqft<=(mean+std))]\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "578c24c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:40.853209Z",
     "iopub.status.busy": "2024-05-17T00:40:40.852752Z",
     "iopub.status.idle": "2024-05-17T00:40:41.404460Z",
     "shell.execute_reply": "2024-05-17T00:40:41.403294Z"
    },
    "papermill": {
     "duration": 0.574558,
     "end_time": "2024-05-17T00:40:41.407389",
     "exception": false,
     "start_time": "2024-05-17T00:40:40.832831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABNYAAANXCAYAAAD5PtJMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACVVUlEQVR4nOzdfZycdXkv/mv2KSQTdjEhmxAB5UFFIGiNFkIiRQgggiLQc4q1iudwtIEgQgLSKEXjA7GAgFQSelp/op6irfzkIViKiAaSgE/8RAEtR4gICtlNpWTZYcluduf3xzCzM/s4e+/DzO6+36/XvDJzzz33fGdmD+flp9f3ulLZbDYbAAAAAMCI1FR6AQAAAAAwGQnWAAAAACABwRoAAAAAJCBYAwAAAIAEBGsAAAAAkIBgDQAAAAASEKwBAAAAQAKCNQAAAABIQLAGAAAAAAkI1gAAJolUKhXnn3/+sOfddNNNkUql4qmnnhrT929vb4//9b/+VyxYsCBSqVRceOGF8dRTT0UqlYqbbrppxNfbtGlTpFKp2LRp07DnHnvssXHssceO+D0AAMaTYA0AYAL867/+a6RSqbj11lv7PfemN70pUqlU/PCHP+z33P777x9HH330qN9//fr1icKvYldccUXcdNNNce6558Y3vvGN+MAHPjDqdQEATGZ1lV4AAMB0sGzZsoiI2LJlS5x++umF421tbfHoo49GXV1dbN26Nd7xjncUnnvmmWfimWeeibPOOmtE7/WBD3wgzjrrrJgxY0bh2Pr162PvvfeOD33oQ4k/ww9+8IM46qij4lOf+lThWDabjY6Ojqivr098XQCAyUrFGgDABFi4cGEccMABsWXLlpLjDz74YGSz2fhv/+2/9Xsu/zgfypWrtrY29thjj0ilUqNbdB+tra2x1157lRxLpVKxxx57RG1t7Zi+FwDAZCBYAwCYIMuWLYuf//zn0dHRUTi2devWOOyww+Lkk0+OH/3oR9HT01PyXCqViqVLl5Zc57bbbovDDz88ZsyYEYcddlj8+7//e8nzfXusvfa1r43HHnss7rvvvkilUpFKpUr6lb3wwgtx4YUXxn777RczZsyIgw8+OP7u7/6usJZ8L7Tf/va38d3vfrdwjaeeemrQHmv/8R//EX/+538ec+bMiT322CPe+ta3xh133FHW9/S///f/joMOOihmzpwZf/qnfxqbN28u63UAABNNsAYAMEGWLVsWXV1d8eMf/7hwbOvWrXH00UfH0UcfHTt37oxHH3205LlDDjkk5s6dWzi2ZcuWOO+88+Kss86KK6+8Ml5++eU488wz449//OOg73vdddfFvvvuG4ccckh84xvfiG984xvxyU9+MiIiXnrppfizP/uz+D//5//EBz/4wbj++utj6dKlsWbNmli1alVERLzxjW+Mb3zjG7H33nvHm9/85sI15s2bN+D7PfbYY3HUUUfFr3/96/ibv/mb+OIXvxjpdDre+973DthjrthXvvKV+Ou//utYsGBBXHnllbF06dJ4z3veE88888zwXzAAwATTYw0AYIIU91k79thjY/fu3fHjH/84zj777DjooINi/vz5sWXLljjiiCPixRdfjEceeST+5//8nyXX+PWvfx2/+tWv4qCDDoqIiHe84x3xpje9Kb75zW8OOjH0ve99b1x22WWx9957x1/91V+VPHfNNdfEk08+GT//+c/jda97XURE/PVf/3UsXLgwrrrqqli9enXst99+8Vd/9Vdx2WWXxatf/eqSa+zYsaPf+33sYx+L/fffP376058W+rydd955sWzZsrj00ktLeswV6+rqik984hPx5je/OX74wx9GQ0NDREQceuih8ZGPfCT222+/Yb9jAICJpGINAGCCvPGNb4y5c+cWeqf94he/iEwmU5j6efTRR8fWrVsjItd7rbu7u19/teXLlxdCtYiII444IhobG2Pbtm2J1vTtb3873v72t8erXvWq+M///M/Cbfny5dHd3R3333//iK73/PPPxw9+8IP47//9v8eLL75YuN4f//jHOOmkk+I3v/lN/OEPfxjwtT/72c+itbU1VqxYUQjVIiI+9KEPRVNTU6LPBwAwnlSsAQBMkFQqFUcffXTcf//90dPTE1u3bo3m5uY4+OCDIyIXrH35y1+OiCgEbH2Dtf3337/fdV/1qlfFf/3XfyVa029+85v45S9/Oei2ztbW1hFd74knnohsNht/+7d/G3/7t3876DVf/epX9zv+u9/9LiKiUDmXV19fHwceeOCI1gEAMBEEawAAE2jZsmWxcePGeOSRRwr91fKOPvrouOSSS+IPf/hDbNmyJRYuXNgvUBps+mY2m020np6enjjhhBPi4x//+IDPv/71rx/x9SIiLr744jjppJMGPCcfJAIATHaCNQCACVTcZ23r1q1x4YUXFp5bvHhxzJgxIzZt2hQ//vGP413veteYvW8qlRrw+EEHHRTt7e2xfPnyMXmffBBYX18/4mu+5jWviYhcFd1xxx1XON7V1RW//e1v401vetOYrBEAYKzosQYAMIHe+ta3xh577BH//M//HH/4wx9KKtZmzJgRb3nLW+KGG26ITCbTbxvoaKTT6XjhhRf6Hf/v//2/x4MPPhh33313v+deeOGF2L1794jep7m5OY499tj4h3/4h3juuef6PT/QsIO8t771rTFv3ry48cYbo7Ozs3D8pptuGnDtAACVpmINAGACNTQ0xNve9rbYvHlzzJgxIxYvXlzy/NFHHx1f/OIXI6J/f7XRWLx4cWzYsCE+97nPxcEHHxzNzc1x3HHHxSWXXBJ33HFHnHrqqfGhD30oFi9eHJlMJh555JG45ZZb4qmnnoq99957RO91ww03xLJly2LRokXx4Q9/OA488MBoaWmJBx98MH7/+9/HL37xiwFfV19fH5/73Ofir//6r+O4446Lv/iLv4jf/va38dWvflWPNQCgKgnWAAAm2LJly2Lz5s2FrZ/Fli5dGl/84hdjzz33HNOtj5dffnn87ne/iyuvvDJefPHF+LM/+7M47rjjYtasWXHffffFFVdcEd/+9rfj61//ejQ2NsbrX//6WLt2baJpnIceemj87Gc/i7Vr18ZNN90Uf/zjH6O5uTn+5E/+JC6//PIhX/uRj3wkuru746qrropLLrkkFi1aFHfccceggxAAACoplU3a6RYAAAAApjE91gAAAAAgAcEaAAAAACQgWAMAAACABARrAAAAAJCAYA0AAAAAEhCsAQAAAEACdZVeQDXo6emJZ599Nvbcc89IpVKVXg4AAAAAFZLNZuPFF1+MhQsXRk3N0DVpgrWIePbZZ2O//far9DIAAAAAqBLPPPNM7LvvvkOeI1iLiD333DMicl9YY2NjhVcDAAAAQKW0tbXFfvvtV8iLhiJYiyhs/2xsbBSsAQAAAFBWuzDDCwAAAAAgAcEaAAAAACQgWAMAAACABPRYK1N3d3d0dXVVehlTSn19fdTW1lZ6GQAAAACJCNbK0N7eHr///e8jm81WeilTSiqVin333Tdmz55d6aUAAAAAjJhgbRjd3d3x+9//PmbNmhXz5s0rayIEw8tms7Fjx474/e9/H6973etUrgEAAACTjmBtGF1dXZHNZmPevHkxc+bMSi9nSpk3b1489dRT0dXVJVgDAAAAJh3DC8qkUm3s+U4BAACAyUywBgAAAAAJCNYAAAAAIAHBGgAAAAAkIFibQB0dES0tuX/H27p16+Jtb3tb7LnnntHc3Bzvfe974/HHHy8557WvfW2kUqlIpVJRW1sbCxcujHPOOSf+67/+q3DOpk2bIpVKxQsvvNDvPV772tfGddddN+jjbDYbF198cTQ2NsamTZvG+BMCAAAAVJZgbQJs2RJxxhkRs2dHLFiQ+/eMMyK2bh2/97zvvvti5cqV8aMf/Sjuueee6OrqihNPPDEymUzJeZ/5zGfiueeei6effjr++Z//Oe6///644IILRv3+3d3dcc4558TXv/71+OEPfxjHHnvsqK8JAAAAUE3qKr2AqW7DhoiVKyNqayN6enLHenoiNm6MuO22iPXrI1asGPv3/fd///eSxzfddFM0NzfHQw89FMccc0zh+J577hkLFiyIiIhXv/rVcfbZZ8c3v/nNUb33rl274n3ve1/87Gc/i82bN8cb3vCGUV0PAAAAoBqpWBtHW7bkQrVsNmL37tLndu/OHT/vvPGtXMvbuXNnRETMmTNn0HP+8Ic/xMaNG+PII49M/D7t7e1xyimnxK9+9avYunWrUA0AAACYsgRr4+iaa3KVakOprY249trxXUdPT09ceOGFsXTp0jj88MNLnrv00ktj9uzZMXPmzNh3330jlUrFNddc0+8a++67b8yePbvk9vTTT/c777Of/Ww8/PDDsXnz5thvv/3G7TMBAAAAVJpgbZx0dETcfnv/SrW+du+OuPXW8R1osHLlynj00UfjW9/6Vr/nLrnkknj44Yfjl7/8Zdx7770REXHKKadEd3d3yXmbN2+Ohx9+uOS2cOHCftfL93G74oorxufDAAAAAFQJPdbGSVtbb0+14fT05M6fOXPs13H++efHnXfeGffff3/su+++/Z7fe++94+CDD46IiNe97nVx3XXXxZIlS+KHP/xhLF++vHDeAQccEHvttVfJa+vq+v/5HH/88fHRj340TjvttOjp6YkvfelLY/uBAAAAAKqEYG2cNDZG1NSUF67V1OTOH0vZbDY++tGPxq233hqbNm2KAw44oKzX1b6yd7VjFCV0J554YmzcuDHe8573RDabjeuvvz7xtQAAAACqlWBtnMycGXHaabnpn0NtB62ry5031tVqK1eujJtvvjluv/322HPPPWP79u0REdHU1BQzi97sxRdfjO3bt0c2m41nnnkmPv7xj8e8efPi6KOPHtX7L1++PO68885497vfHT09PfHlL395VNcDAAAAqDZ6rI2jVasi+rQq66e7O+Kii8b+vTds2BA7d+6MY489NvbZZ5/C7V/+5V9Kzrv88stjn332iYULF8app54a6XQ6vve978XcuXNHvYbjjjsuvvvd78ZNN90UK1eujGw2O+prAgAAAFQLFWvjaNmyiPXrI847Lzf9s7hyra4uF6qtXx+xdOnYv3c5IdZTTz017DnHHnvsoNfq+/qBrnfsscdGe3v7sO8DAAAAMNmoWBtnK1ZEbN6c2+5Z88q3XVOTe7x5c+55AAAAACYfFWsTYOnS3K2jIzf9s7FxfCaAAgAAADBxBGsTaOZMgRoAAADAVGErKAAAAAAkIFgDAAAAgAQEawAAAACMWKYzE6m1qUitTUWmM1Pp5VRE1QRrX/jCFyKVSsWFF15YOPbyyy/HypUrY+7cuTF79uw488wzo6WlpeR1Tz/9dJxyyikxa9asaG5ujksuuSR27949wasHAAAAYLqpimDtpz/9afzDP/xDHHHEESXHL7rooti4cWN8+9vfjvvuuy+effbZOOOMMwrPd3d3xymnnBKdnZ3xwAMPxNe+9rW46aab4vLLL5/ojwAAAADANFPxYK29vT3e//73xz/+4z/Gq171qsLxnTt3xle+8pW45ppr4rjjjovFixfHV7/61XjggQfiRz/6UUREfO9734tf/epX8X/+z/+JN7/5zXHyySfHZz/72bjhhhuis7OzUh8JAAAAYErKdGZ6b1292z8zXZmS56aLigdrK1eujFNOOSWWL19ecvyhhx6Krq6ukuOHHHJI7L///vHggw9GRMSDDz4YixYtivnz5xfOOemkk6KtrS0ee+yxQd9z165d0dbWVnIDAAAAYGiz180u3OZf3ZvHzL96fslz00VFg7Vvfetb8f/9f/9frFu3rt9z27dvj4aGhthrr71Kjs+fPz+2b99eOKc4VMs/n39uMOvWrYumpqbCbb/99hvlJ6k+GzZsiCOOOCIaGxujsbExlixZEnfddVfh+de+9rWRSqUilUpFbW1tLFy4MM4555z4r//6r8I5mzZtilQqFS+88EK/67/2ta+N6667btDH2Ww2Lr744mhsbIxNmzaNwycEAAAAqKy6Sr3xM888Ex/72MfinnvuiT322GNC33vNmjWxatWqwuO2trZxD9cynZlCYtu+pj3SDelxfb999903vvCFL8TrXve6yGaz8bWvfS1OO+20+PnPfx6HHXZYRER85jOfiQ9/+MPR3d0d//f//t/4yEc+EhdccEF84xvfGNV7d3d3x4c//OG4884744c//GEsXrx4LD4SAAAAUGHta9oL9zNdmULVWsvFLZGuH9+soxpVLFh76KGHorW1Nd7ylrcUjnV3d8f9998fX/7yl+Puu++Ozs7OeOGFF0qq1lpaWmLBggUREbFgwYL4yU9+UnLd/NTQ/DkDmTFjRsyYMWMMP031efe7313y+POf/3xs2LAhfvSjHxWCtT333LPwPb361a+Os88+O775zW+O6n137doV73vf++JnP/tZbN68Od7whjeM6noAAABA9RisUChdnx73IqJqVLGtoMcff3w88sgj8fDDDxdub33rW+P9739/4X59fX3ce++9hdc8/vjj8fTTT8eSJUsiImLJkiXxyCOPRGtra+Gce+65JxobG+PQQw+d8M9Urbq7u+Nb3/pWZDKZwnfX1x/+8IfYuHFjHHnkkYnfp729PU455ZT41a9+FVu3bhWqAQAAAFNaxSrW9txzzzj88MNLjqXT6Zg7d27h+DnnnBOrVq2KOXPmRGNjY3z0ox+NJUuWxFFHHRURESeeeGIceuih8YEPfCCuvPLK2L59e1x22WWxcuXKqqhIK56C0XdSRrHxSnQfeeSRWLJkSbz88ssxe/bsuPXWW0sCx0svvTQuu+yy6O7ujpdffjmOPPLIuOaaa/pdZ9999+137KWXXup37LOf/Wzsueee8etf/zrmzZs3th8GAAAAoMpULFgrx7XXXhs1NTVx5plnxq5du+Kkk06K9evXF56vra2NO++8M84999xYsmRJpNPpOPvss+Mzn/lMBVfda7ApGMVTMyIisp/Kjsv7v+ENb4iHH344du7cGbfcckucffbZcd999xXCtUsuuSQ+9KEPRTabjWeeeSY+8YlPxCmnnBL3339/1NbWFq6zefPm2HPPPUuufeyxx/Z7vxNPPDG+//3vxxVXXBHXXnvtuHwmAAAAoDqkG9LjlmlMFlUVrPWdHrnHHnvEDTfcEDfccMOgr3nNa14T//Zv/zbOK5ucGhoa4uCDD46IiMWLF8dPf/rT+NKXvhT/8A//EBERe++9d+H5173udXHdddfFkiVL4oc//GEsX768cJ0DDjig33TWurr+fzrHH398fPSjH43TTjstenp64ktf+tI4fTIAAACAyquqYG2qqbZJGT09PbFr165Bn89XqXV0dCR+jxNPPDE2btwY73nPeyKbzcb111+f+FoAAAAA1UywNo4qOSljzZo1cfLJJ8f+++8fL774Ytx8882xadOmuPvuuwvnvPjii7F9+/bCVtCPf/zjMW/evDj66KNH9d7Lly+PO++8M9797ndHT09PfPnLXx7txwEAAACoOoK1Kaq1tTU++MEPxnPPPRdNTU1xxBFHxN133x0nnHBC4ZzLL788Lr/88oiImDdvXrztbW+L733vezF37txRv/9xxx0X3/3ud+PUU0+NbDYbX/7ylyOVSo36ugAAAADVQrA2RX3lK18Z8vmnnnpq2Gsce+yxkc0O3ISw7+sHut6xxx4b7e3t/Y4DAAAATAWCtQliUgYAAADA1FJT6QUAAAAAwGQkWAMAAACABARrAAAAAJCAYK1MgzXxJznfKQAAADCZCdaGUVtbGxERnZ2dFV7J1JP/TvPfMQAAAMBkYiroMOrq6mLWrFmxY8eOqK+vj5oaWeRY6OnpiR07dsSsWbOirs6fIQAAADD5SDSGkUqlYp999onf/va38bvf/a7Sy5lSampqYv/9949UKlXppQAAAACMmGCtDA0NDfG6173OdtAx1tDQoAIQAAAAmLQEa2WqqamJPfbYo9LLAAAAAKBKKBcCAAAAgAQEawAAAACQgGANAAAAABIQrAEAAABAAoI1AAAAAEhAsAYAAAAACQjWAAAAACABwRoAAAAAJCBYAwAAAIAEBGsAAAAAkIBgDQAAAAASEKwBAAAAQAKCNQAAAABIQLAGAAAAAAkI1gAAAAAgAcEaAAAAACQgWAMAAACABARrAAAAAJCAYA0AAAAAEhCsAQAAAEACgjUAAAAASECwBgAAAAAJCNYAAAAAIAHBGgAAAAAkIFgDAAAAgAQEawAAAACQgGANAAAAABIQrAEAAABAAoI1AAAAAEhAsAYAAAAACQjWAAAAACABwRoAAAAAJCBYAwAAAIAEBGsAAAAAkIBgDQAAAAASEKwBAAAAQAKCNQAAAABIQLAGAAAAAAkI1gAAAAAgAcEaAAAAACQgWAMAAACABARrAAAAAJCAYA0AAAAAEhCsAQAAAEACgjUAAAAASECwBgAAAAAJCNYAAAAAIAHBGgAAAAAkIFgDAAAAgAQEawAAAACQgGANAAAAABIQrAEAAABAAoI1AAAAAEhAsAYAAAAACQjWAAAAACABwRoAAAAAJCBYAwAAAIAEBGsAAAAAkIBgDQAAAAASEKwBAAAAQAKCNQAAAABIQLAGAAAAAAkI1gAAAAAgAcEaAAAAACQgWAMAAACABARrAAAAAJCAYA0AAAAAEhCsAQAAAEACgjUAAAAASECwBgAAAAAJVDRY27BhQxxxxBHR2NgYjY2NsWTJkrjrrrsKzx977LGRSqVKbitWrCi5xtNPPx2nnHJKzJo1K5qbm+OSSy6J3bt3T/RHAQAAAGCaqavkm++7777xhS98IV73utdFNpuNr33ta3HaaafFz3/+8zjssMMiIuLDH/5wfOYznym8ZtasWYX73d3dccopp8SCBQvigQceiOeeey4++MEPRn19fVxxxRUT/nkAAAAAmD5S2Ww2W+lFFJszZ05cddVVcc4558Sxxx4bb37zm+O6664b8Ny77rorTj311Hj22Wdj/vz5ERFx4403xqWXXho7duyIhoaGst6zra0tmpqaYufOndHY2DhWHwUAAACASWYkOVHV9Fjr7u6Ob33rW5HJZGLJkiWF4//8z/8ce++9dxx++OGxZs2aeOmllwrPPfjgg7Fo0aJCqBYRcdJJJ0VbW1s89thjg77Xrl27oq2treQGAAAAACNR0a2gERGPPPJILFmyJF5++eWYPXt23HrrrXHooYdGRMRf/uVfxmte85pYuHBh/PKXv4xLL700Hn/88fjOd74TERHbt28vCdUiovB4+/btg77nunXrYu3ateP0iQAAAACYDioerL3hDW+Ihx9+OHbu3Bm33HJLnH322XHffffFoYceGh/5yEcK5y1atCj22WefOP744+PJJ5+Mgw46KPF7rlmzJlatWlV43NbWFvvtt9+oPgcAAAAA00vFt4I2NDTEwQcfHIsXL45169bFm970pvjSl7404LlHHnlkREQ88cQTERGxYMGCaGlpKTkn/3jBggWDvueMGTMKk0jzNwAAAAAYiYoHa3319PTErl27Bnzu4YcfjoiIffbZJyIilixZEo888ki0trYWzrnnnnuisbGxsJ0UAAAAAMZDRbeCrlmzJk4++eTYf//948UXX4ybb745Nm3aFHfffXc8+eSTcfPNN8e73vWumDt3bvzyl7+Miy66KI455pg44ogjIiLixBNPjEMPPTQ+8IEPxJVXXhnbt2+Pyy67LFauXBkzZsyo5EcDAAAAYIqraLDW2toaH/zgB+O5556LpqamOOKII+Luu++OE044IZ555pn4/ve/H9ddd11kMpnYb7/94swzz4zLLrus8Pra2tq4884749xzz40lS5ZEOp2Os88+Oz7zmc9U8FMBAAAAMB2kstlsttKLqLS2trZoamqKnTt36rcGAAAAMI2NJCequh5rAAAAADAZCNYAAAAAIAHBGgAAAAAkIFgDAAAAgAQEawAAAACQgGANAAAAABIQrAEAAABAAoI1AAAAAEhAsAYAAAAACQjWAAAAACABwRoAAAAAJCBYAwAAAIAEBGsAAAAAkIBgDQAAAAASEKwBAAAAQAKCNQAAAABIQLAGAAAAAAkI1gAAAAAgAcEaAAAAACQgWAMAAACABARrAAAAAJCAYA0AAAAAEhCsAQAAAEACgjUAAAAASECwBgAAAAAJCNYAAAAAIAHBGgAAAAAkIFgDAAAAgAQEawAAAACQgGANAAAAABIQrAEAAABAAoI1AAAAAEhAsAYAAAAACQjWAAAAACABwRoAAAAAJCBYAwAAAIAEBGsAAAAAkIBgDQAAAAASEKwBAAAAQAKCNQAAAABIQLAGAAAAAAkI1gAAAAAgAcEaAAAAACQgWAMAAACABARrAAAAAJCAYA0AAAAAEhCsAQAAAEACgjUAAAAASECwBgAAAAAJCNYAAAAAIAHBGgAAAAAkIFgDAAAAgAQEawAAAACQgGANAAAAmPYynZlIrU1Fam0qMp2ZSi+HSUKwBgAAAAAJCNYAAAAAIIG6Si8AAAAAoBKKt3xmuga+HxGRbkhP2JqYXARrAAAAwLQ0e93sAY/Pv3p+yePsp7ITsRwmIVtBAQAAACABFWsAAADAtNS+pr1wP9OVKVSqtVzcEul62z8ZnmANAAAAmJYG652Wrk/rq0ZZbAUFAAAAgAQEawAAAACQgK2gAAAAwLSXbkib/smIqVgDAAAAgAQEawAAAACQgGANAAAAABIQrAEAAABAAoI1AAAAAEhAsAYAAAAACQjWAAAAACABwRoAAAAAJCBYAwAAAIAEBGsAAAAAkIBgDQAAAAASEKwBAAAAQAKCNQAAAABIQLAGAAAAAAkI1gAAAAAgAcEaAAAAACQgWAMAAACABARrAAAAAJCAYA0AAAAAEhCsAQAAAFUl05mJ1NpUpNamItOZqfRyYFAVDdY2bNgQRxxxRDQ2NkZjY2MsWbIk7rrrrsLzL7/8cqxcuTLmzp0bs2fPjjPPPDNaWlpKrvH000/HKaecErNmzYrm5ua45JJLYvfu3RP9UQAAAACYZioarO27777xhS98IR566KH42c9+Fscdd1ycdtpp8dhjj0VExEUXXRQbN26Mb3/723HffffFs88+G2eccUbh9d3d3XHKKadEZ2dnPPDAA/G1r30tbrrpprj88ssr9ZEAAAAAmCZS2Ww2W+lFFJszZ05cddVV8ed//ucxb968uPnmm+PP//zPIyLiP/7jP+KNb3xjPPjgg3HUUUfFXXfdFaeeemo8++yzMX/+/IiIuPHGG+PSSy+NHTt2RENDQ1nv2dbWFk1NTbFz585obGwct88GAAAADKx4y2emKxPzr8797/yWi1siXZ8uPJduSPd7LYylkeREdRO0pmF1d3fHt7/97chkMrFkyZJ46KGHoqurK5YvX14455BDDon999+/EKw9+OCDsWjRokKoFhFx0kknxbnnnhuPPfZY/Mmf/MmA77Vr167YtWtX4XFbW9v4fTAAAABgWLPXzR7weD5gy8t+qqrqg5jmKj684JFHHonZs2fHjBkzYsWKFXHrrbfGoYceGtu3b4+GhobYa6+9Ss6fP39+bN++PSIitm/fXhKq5Z/PPzeYdevWRVNTU+G23377je2HAgAAAGDKq3jF2hve8IZ4+OGHY+fOnXHLLbfE2WefHffdd9+4vueaNWti1apVhcdtbW3CNQAAAKig9jXthftDbQWFalLxYK2hoSEOPvjgiIhYvHhx/PSnP40vfelL8Rd/8RfR2dkZL7zwQknVWktLSyxYsCAiIhYsWBA/+clPSq6XnxqaP2cgM2bMiBkzZozxJwEAAACSGqx3Wro+ra8aVaviW0H76unpiV27dsXixYujvr4+7r333sJzjz/+eDz99NOxZMmSiIhYsmRJPPLII9Ha2lo455577onGxsY49NBDJ3ztAAAAAEwfFa1YW7NmTZx88smx//77x4svvhg3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7nc8m83G3/zN34x6UQAAAABQ7RIFa7/5zW/i0EMP7Xf8kEMOiSeeeGLUiwIAAACAapcoWGtqaopt27b1O/7EE09EOp0e9aIAAAAAoNolCtZOO+20uPDCC+PJJ58sHHviiSdi9erV8Z73vGfMFgcAAAAA1SpRsHbllVdGOp2OQw45JA444IA44IAD4o1vfGPMnTs3rr766rFeIwAAAABUnbokL2pqaooHHngg7rnnnvjFL34RM2fOjCOOOCKOOeaYsV4fAAAAAFSlVDabzVZ6EZXW1tYWTU1NsXPnzmhsbKz0cgAAAACokJHkRGVXrF1//fXxkY98JPbYY4+4/vrrhzz3ggsuKPeyAAAAADAplV2xdsABB8TPfvazmDt3bhxwwAGDXzCVGnBiaDVTsQYAAABAxDhVrP32t78d8D4AAAAATEcjngra1dUVBx10UPz6178ej/UAAAAAwKQw4mCtvr4+Xn755fFYCwAAAABMGiMO1iIiVq5cGX/3d38Xu3fvHuv1AAAAAMCkUHaPtWI//elP4957743vfe97sWjRokin0yXPf+c73xmTxQEAAABAtUoUrO21115x5plnjvVaAAAAoOIynZmYvW52RES0r2mPdEN6mFcA09WIgrWenp646qqr4v/+3/8bnZ2dcdxxx8WnP/3pmDlz5nitDwAAAACq0oh6rH3+85+PT3ziEzF79ux49atfHddff32sXLlyvNYGAAAAAFVrRBVrX//612P9+vXx13/91xER8f3vfz9OOeWU+Kd/+qeoqUk0BwEAAAAqLtOZ6b3fNfD9iLAtFCiRymaz2XJPnjFjRjzxxBOx3377FY7tscce8cQTT8S+++47LgucCG1tbdHU1BQ7d+6MxsbGSi8HAACACZZamyrrvOynyv6f0MAkNZKcaERlZrt374499tij5Fh9fX10dXWNfJUAAAAAMImNaCtoNpuND33oQzFjxozCsZdffjlWrFgR6XRvOex3vvOdsVshAAAAjLP2Ne2F+5muTMy/en5ERLRc3BLpets/gYGNKFg7++yz+x37q7/6qzFbDAAAAFTCYL3T0vVpfdWAQY0oWPvqV786XusAAAAAgEnFKE8AAAAASGBEFWsAAAAw1aUb0qZ/AmVRsQYAAAAACQjWAAAAACABwRoAAAAAJCBYAwAAAIAEBGsAAMC0kenMRGptKlJrU5HpzFR6OTCm/H3DxKtosLZu3bp429veFnvuuWc0NzfHe9/73nj88cdLznn55Zdj5cqVMXfu3Jg9e3aceeaZ0dLSUnLO008/HaecckrMmjUrmpub45JLLondu3dP5EcBAAAAYJqpaLB23333xcqVK+NHP/pR3HPPPdHV1RUnnnhiZDK9yfpFF10UGzdujG9/+9tx3333xbPPPhtnnHFG4fnu7u445ZRTorOzMx544IH42te+FjfddFNcfvnllfhIAAAAAEwTqWw2m630IvJ27NgRzc3Ncd9998UxxxwTO3fujHnz5sXNN98cf/7nfx4REf/xH/8Rb3zjG+PBBx+Mo446Ku6666449dRT49lnn4358+dHRMSNN94Yl156aezYsSMaGhqGfd+2trZoamqKnTt3RmNj47h+RgAAYGIVb4nLdGVi/tW5/93QcnFLpOvThefSDel+r4Vq5+8bxt5IcqK6CVpTWXbu3BkREXPmzImIiIceeii6urpi+fLlhXMOOeSQ2H///QvB2oMPPhiLFi0qhGoRESeddFKce+658dhjj8Wf/Mmf9HufXbt2xa5duwqP29raxusjAQAAFTZ73ewBj+cDiLzsp6qm5gDK5u8bKqtqhhf09PTEhRdeGEuXLo3DDz88IiK2b98eDQ0Nsddee5WcO3/+/Ni+fXvhnOJQLf98/rmBrFu3Lpqamgq3/fbbb4w/DQAAAABTXdVUrK1cuTIeffTR2LJly7i/15o1a2LVqlWFx21tbcI1AACYotrXtBfuD7VVDiYjf99QWVURrJ1//vlx5513xv333x/77rtv4fiCBQuis7MzXnjhhZKqtZaWlliwYEHhnJ/85Ccl18tPDc2f09eMGTNixowZY/wpAACAajRYb6l0fVrfKSY9f99QWRXdCprNZuP888+PW2+9NX7wgx/EAQccUPL84sWLo76+Pu69997CsccffzyefvrpWLJkSURELFmyJB555JFobW0tnHPPPfdEY2NjHHrooRPzQQAAAACYdipasbZy5cq4+eab4/bbb48999yz0BOtqakpZs6cGU1NTXHOOefEqlWrYs6cOdHY2Bgf/ehHY8mSJXHUUUdFRMSJJ54Yhx56aHzgAx+IK6+8MrZv3x6XXXZZrFy5UlUaAAAAAOMmlc1mKzYaJJVKDXj8q1/9anzoQx+KiIiXX345Vq9eHd/85jdj165dcdJJJ8X69etLtnn+7ne/i3PPPTc2bdoU6XQ6zj777PjCF74QdXXl5YYjGaMKAAAAwNQ1kpyoosFatRCsAQAAABAxspyooj3WAAAAAGCyEqwBAAAAQAKCNQAAAABIQLAGAAAAAAkI1gAAAAAgAcEaAAAAACQgWAMAAACABARrAADAuMp0ZiK1NhWptanIdGYqvRwAGDOCNQAAAABIQLAGAAAAAAnUVXoBAADA1FO85TPTNfD9iIh0Q3rC1gQAY02wBgAAjLnZ62YPeHz+1fNLHmc/lZ2I5QDAuLAVFAAAAAASULEGAACMufY17YX7ma5MoVKt5eKWSNfb/gnA1CBYAwAAxtxgvdPS9Wl91QCYMmwFBQAAAIAEBGsAAAAAkICtoAAAwLhKN6RN/wRgSlKxBgAAAAAJCNYAAAAAIAHBGgAAAAAkIFgDAAAAgAQEawAAAACQgGANAAAAABIQrAEAAABAAoI1AAAAAEhAsAYAAAAACQjWAAAAACABwRoAAAAAJCBYAwAAAIAEBGsAAAAAkIBgDQAAAAASEKwBAAAAQAKCNQAAAABIQLAGAAAAAAkI1gAAAAAgAcEaAABMgExnJlJrU5Fam4pMZ6bSywEAxoBgDQAAAAASEKwBAAAAQAJ1lV4AAABMVcVbPjNdA9+PiEg3pCdsTQDA2BGsAQDAOJm9bvaAx+dfPb/kcfZT2YlYDgAwxmwFBQAAAIAEVKwBAMA4aV/TXrif6coUKtVaLm6JdL3tnwAw2QnWAABgnAzWOy1dn9ZXDQCmAFtBAQAAACABwRoAAAAAJGArKAAATIB0Q9r0TwCYYlSsAQAAAEACgjUAAAAASECwBgAAAAAJCNYAAAAAIAHBGgAAAAAkIFgDAAAAgAQEawAAAACQgGANAAAAABIQrAEAAABAAoI1AAAAAEhAsAYAAAAACQjWAAAAACABwRoAAAAAJCBYAwAABpTpzERqbSpSa1OR6cxUejkAUHUEawAAAACQgGANAKqI6hAAAJg86iq9AAAAoHoUh/qZroHvR0SkG9ITtiYAqFaCNQCmnExnJmavmx0REe1r2v2PP4ARyP/3s6/5V88veZz9VHYilgMAVU2wBgAVpjoEAAAmJ8EaAFSY6hCgmrSvaS/cz3RlCv8tarm4JdL1An4AKCZYA2BKUPUFMDYG++9kuj7tv6EA0IdgDYApYTJXfakOAQCAyUmwBgAVpjoEAAAmJ8EaAFOCqi+mClNtqSbphnRVVvoCQLUQrAEwJaj6AgAAJppgDQCqiOqQylAlBgBAEoI1AIAKM9UWAGByEqwBMOWo+mKymcxTbQEApjPBGgAwLakSAwBgtARrAMC0VE1VYqbaAgBMToI1AIAKM9UWAGByEqwBANOSKjEAAEZLsAYATEuqxAAAGC3BGgBAFTHVFgBg8qip9AIAAAAAYDJSsQYATHuqxAAASELFGsAkkOnMRGptKlJrU5HpzFR6OfTh9wEAgOmposHa/fffH+9+97tj4cKFkUql4rbbbit5/kMf+lCkUqmS2zvf+c6Sc55//vl4//vfH42NjbHXXnvFOeecE+3t7QEAAAAA46miwVomk4k3velNccMNNwx6zjvf+c547rnnCrdvfvObJc+///3vj8ceeyzuueeeuPPOO+P++++Pj3zkI+O9dABgilOJCADAcCraY+3kk0+Ok08+echzZsyYEQsWLBjwuV//+tfx7//+7/HTn/403vrWt0ZExN///d/Hu971rrj66qtj4cKFY75mgIlS/D/kM10D34/I9YZi4vl9AACAqh9esGnTpmhubo5XvepVcdxxx8XnPve5mDt3bkREPPjgg7HXXnsVQrWIiOXLl0dNTU38+Mc/jtNPP33Aa+7atSt27dpVeNzW1ja+HwIggdnrZg94fP7V80sea7heGX4fAACgqocXvPOd74yvf/3rce+998bf/d3fxX333Rcnn3xydHd3R0TE9u3bo7m5ueQ1dXV1MWfOnNi+ffug1123bl00NTUVbvvtt9+4fg4AYHLIdGZ6b30qEYufAwCAiCqvWDvrrLMK9xctWhRHHHFEHHTQQbFp06Y4/vjjE193zZo1sWrVqsLjtrY24RpQddrX9A5iyXRlCpVQLRe3RLre9sJK8/tMTSoRAQAYiaoO1vo68MADY++9944nnngijj/++FiwYEG0traWnLN79+54/vnnB+3LFpHr2zZjxozxXi7AqAzWmytdn9a3qwr4fQAAgEkVrP3+97+PP/7xj7HPPvtERMSSJUvihRdeiIceeigWL14cERE/+MEPoqenJ4488shKLhUAmIRUIgIAMBIVDdba29vjiSeeKDz+7W9/Gw8//HDMmTMn5syZE2vXro0zzzwzFixYEE8++WR8/OMfj4MPPjhOOumk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ffr0kc1m0+DBg5253QAAAB5BsAYAAOABwcHBCg4O1oYNG3T9+vVKy5SWliopKUl+fn7au3evli5dqunTp7t8rmvXrqlv377auHGjsrKy9Nxzz2n06NH64osvHMqtWrVKfn5+ysjI0NKlS5WXl6dHHnlEffr00f79+7V582ZduHBBTz31lFvXfOPGDcXHx6tly5ZKT09XRkaGgoODlZCQoOLiYknS6tWr9eabb+qtt97SsWPHNGfOHM2cOVOrVq2SJHubP//8c+Xk5Gj9+vVutQUAAKA+8CgoAACAB/j6+mrlypWaMGGCli5dqtjYWA0aNEhPP/20evfuLckKj7788ktt2bJFkZGRkqQ5c+Zo+PDhLp2rQ4cOeuWVV+zvf/GLX2jLli368MMP1a9fP/vn3bp104IFC+zvZ8+erT59+mjOnDn2z/70pz8pKipKx48f17333lvlOTt27Ojw/uuvv9amTZtUWlqq5cuXy2azSZJWrFihsLAwpaWladiwYZo1a5beeecdJSUlSbJmqB09elTLli3TmDFj1LZtW0nSXXfdpYiICJfuAwAAQH0jWAMAAPCQkSNHasSIEUpPT9eePXu0adMmLViwQMuXL9fYsWN17NgxRUVF2UM1SYqLi3P5PDdv3tScOXP04Ycf6ttvv1VxcbGuX7+uoKAgh3J9+/Z1eH/o0CFt37690vXRTp06VW2wlp6erpYtW9rft2rVSocOHdLJkycdPpesGXWnTp3SlStXdOrUKY0bN04TJkywHy8pKVFoaKhL1wwAANAQCNYAAAA8KCAgQI8++qgeffRRzZw5U+PHj9esWbM0duxYp77v42Ot5GGMsX9248YNhzJvv/223nvvPf3+979XTEyMWrRooalTp9ofvyzTokULh/eXL1/WY489pvnz59923vbt21fbrujoaIWFhd1WX9++fbV69erbyrdt21aXL1+WJP3xj39U//79HY43a9as2vMBAAB4A4I1AACABtSzZ0/7xgQ9evTQuXPnlJOTYw+y9uzZ41C+7NHInJwctWrVSpK1eUF5GRkZSkxM1E9/+lNJ1tptx48fV8+ePattS2xsrP7617/q7rvvlq9v7f+ZGBsbq7/85S9q166dw46hZUJDQxUZGamvvvpKo0aNqrSOsp1Kb968Wev2AAAA1DU2LwAAAPCA3NxcPfLII/rzn/+sw4cP6/Tp0/roo4+0YMECJSYmSpKGDh2qe++9V2PGjNGhQ4eUnp6uN954w6Gerl27KioqSr/+9a914sQJbdy4Ue+8845DmW7duik1NVV///vfdezYMf385z/XhQsXamzj5MmTdenSJSUnJ2vfvn06deqUtmzZomeffdatYGvUqFFq06aNEhMTlZ6ertOnTystLU2//OUv9c0330iSfvOb32ju3LlatGiRjh8/riNHjmjFihVauHChJGu30cDAQPtGCvn5+S63AwAAoL4QrAEAAHhAcHCw+vfvr3fffVcDBw5Ur169NHPmTE2YMEHvv/++JOsxz5SUFBUVFalfv34aP3683nrrLYd6mjdvrjVr1ujLL79U7969NX/+fM2ePduhzIwZMxQbG6v4+HgNHjxYEREReuKJJ2psY2RkpDIyMnTz5k0NGzZMMTExmjp1qsLCwuyPoLoiKChIO3fuVKdOnZSUlKQePXpo3Lhxunbtmn0G2/jx47V8+XKtWLFCMTExGjRokFauXKno6GhJ1qYPixYt0rJlyxQZGWkPIQEAALyBzZRfoAMAAABex2azKSUlxalwDAAAAJ7DjDUAAAAAAADADQRrAAAAAAAAgBvYFRQAAMDLsXIHAACAd2LGGgAAAAAAAOAGgjUAAAAAAADADQRrAAAAAAAAgBsI1gAAAAAAAAA3EKwBAAAAAAAAbiBYAwAAAAAAANxAsAYAAAAAAAC4gWANAAAAAAAAcMP/B/NER5DKYGGyAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_scatter_chart(location, df):\n",
    "    df = df[df[\"location\"]==location]\n",
    "    bhk2 = df[df.bhk==2]\n",
    "    bhk3 = df[df.bhk==3]\n",
    "    plt.figure(figsize=(15,10))\n",
    "    plt.scatter(bhk2.total_sqft, bhk2.price, color='blue', label=\"2BHK\", s=50)\n",
    "    plt.scatter(bhk3.total_sqft, bhk3.price, color=\"green\", marker=\"+\", label=\"3BHK\", s=50)\n",
    "    plt.xlabel(\"Square Feet\")\n",
    "    plt.ylabel(\"Price\")\n",
    "    plt.title(location)\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "\n",
    "plot_scatter_chart(\"Whitefield\",df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06df7283",
   "metadata": {
    "papermill": {
     "duration": 0.019161,
     "end_time": "2024-05-17T00:40:41.445529",
     "exception": false,
     "start_time": "2024-05-17T00:40:41.426368",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "There are 3bhk houses with low prie than 2 bhk , which is considerd an outlier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d6ab3250",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:41.486292Z",
     "iopub.status.busy": "2024-05-17T00:40:41.485905Z",
     "iopub.status.idle": "2024-05-17T00:40:42.208450Z",
     "shell.execute_reply": "2024-05-17T00:40:42.206737Z"
    },
    "papermill": {
     "duration": 0.74613,
     "end_time": "2024-05-17T00:40:42.211394",
     "exception": false,
     "start_time": "2024-05-17T00:40:41.465264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(11294, 6)\n",
      "{1: {'mean': 5697.727084471517, 'std': 1235.7871684701186, 'count': 25}, 2: {'mean': 5016.339578005108, 'std': 1294.2186121046082, 'count': 233}, 3: {'mean': 5584.943432888351, 'std': 1415.607875923605, 'count': 165}, 4: {'mean': 7122.3596310283565, 'std': 1473.342429938861, 'count': 63}, 5: {'mean': 8336.166096119152, 'std': 1225.7331394126197, 'count': 5}}\n",
      "(8161, 6)\n"
     ]
    }
   ],
   "source": [
    "def remove_bhk_outliers(df):\n",
    "    outliers = np.array([])\n",
    "    for location, location_df in df.groupby('location'):\n",
    "        bhk_stats = {}\n",
    "        for bhk, bhk_df in location_df.groupby(\"bhk\"):\n",
    "            bhk_stats[bhk] = {\n",
    "                \"mean\":np.mean(bhk_df[\"price_per_sqft\"]),\n",
    "                \"std\":np.std(bhk_df[\"price_per_sqft\"]),\n",
    "                \"count\":bhk_df.shape[0]\n",
    "            }\n",
    "        if(location == \"Whitefield\"):\n",
    "            print(bhk_stats)\n",
    "        for bhk, bhk_df in location_df.groupby(\"bhk\"):\n",
    "            stats = bhk_stats.get(bhk-1)\n",
    "            if stats and stats[\"count\"]>5:\n",
    "                outliers = np.append(outliers, bhk_df[bhk_df[\"price_per_sqft\"]<stats[\"mean\"]].index.values)\n",
    "    return df.drop(outliers, axis=0)\n",
    "\n",
    "print(df.shape)\n",
    "df = remove_bhk_outliers(df)\n",
    "print(df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e315c15d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:42.252418Z",
     "iopub.status.busy": "2024-05-17T00:40:42.251961Z",
     "iopub.status.idle": "2024-05-17T00:40:42.669615Z",
     "shell.execute_reply": "2024-05-17T00:40:42.668386Z"
    },
    "papermill": {
     "duration": 0.441517,
     "end_time": "2024-05-17T00:40:42.672289",
     "exception": false,
     "start_time": "2024-05-17T00:40:42.230772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_scatter_chart(\"Whitefield\",df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b9f9856",
   "metadata": {
    "papermill": {
     "duration": 0.019685,
     "end_time": "2024-05-17T00:40:42.712072",
     "exception": false,
     "start_time": "2024-05-17T00:40:42.692387",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Baths**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "54edbda5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:42.754687Z",
     "iopub.status.busy": "2024-05-17T00:40:42.753988Z",
     "iopub.status.idle": "2024-05-17T00:40:43.047949Z",
     "shell.execute_reply": "2024-05-17T00:40:43.046804Z"
    },
    "papermill": {
     "duration": 0.318618,
     "end_time": "2024-05-17T00:40:43.050713",
     "exception": false,
     "start_time": "2024-05-17T00:40:42.732095",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Count')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.bath, rwidth=0.8)\n",
    "plt.xlabel(\"No of Bathrooms\")\n",
    "plt.ylabel(\"Count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "210be337",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:43.094986Z",
     "iopub.status.busy": "2024-05-17T00:40:43.094200Z",
     "iopub.status.idle": "2024-05-17T00:40:43.112676Z",
     "shell.execute_reply": "2024-05-17T00:40:43.111862Z"
    },
    "papermill": {
     "duration": 0.04274,
     "end_time": "2024-05-17T00:40:43.114830",
     "exception": false,
     "start_time": "2024-05-17T00:40:43.072090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8161\n",
      "8157\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>price</th>\n",
       "      <th>bhk</th>\n",
       "      <th>price_per_sqft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Electronic City Phase II</td>\n",
       "      <td>1056.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>39.07</td>\n",
       "      <td>2</td>\n",
       "      <td>3699.810606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Uttarahalli</td>\n",
       "      <td>1440.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>62.00</td>\n",
       "      <td>3</td>\n",
       "      <td>4305.555556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Lingadheeranahalli</td>\n",
       "      <td>1521.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>95.00</td>\n",
       "      <td>3</td>\n",
       "      <td>6245.890861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kothanur</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>51.00</td>\n",
       "      <td>2</td>\n",
       "      <td>4250.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Old Airport Road</td>\n",
       "      <td>2732.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>204.00</td>\n",
       "      <td>4</td>\n",
       "      <td>7467.057101</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   location  total_sqft  bath   price  bhk  price_per_sqft\n",
       "0  Electronic City Phase II      1056.0   2.0   39.07    2     3699.810606\n",
       "2               Uttarahalli      1440.0   2.0   62.00    3     4305.555556\n",
       "3        Lingadheeranahalli      1521.0   3.0   95.00    3     6245.890861\n",
       "4                  Kothanur      1200.0   2.0   51.00    2     4250.000000\n",
       "6          Old Airport Road      2732.0   4.0  204.00    4     7467.057101"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df.shape[0])\n",
    "df = df[df.bath<=df.bhk+2]\n",
    "print(df.shape[0])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "d182a162",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:43.160293Z",
     "iopub.status.busy": "2024-05-17T00:40:43.159007Z",
     "iopub.status.idle": "2024-05-17T00:40:43.176430Z",
     "shell.execute_reply": "2024-05-17T00:40:43.175118Z"
    },
    "papermill": {
     "duration": 0.042225,
     "end_time": "2024-05-17T00:40:43.178788",
     "exception": false,
     "start_time": "2024-05-17T00:40:43.136563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>price</th>\n",
       "      <th>bhk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Electronic City Phase II</td>\n",
       "      <td>1056.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>39.07</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Uttarahalli</td>\n",
       "      <td>1440.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>62.00</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Lingadheeranahalli</td>\n",
       "      <td>1521.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>95.00</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kothanur</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>51.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Old Airport Road</td>\n",
       "      <td>2732.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>204.00</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   location  total_sqft  bath   price  bhk\n",
       "0  Electronic City Phase II      1056.0   2.0   39.07    2\n",
       "2               Uttarahalli      1440.0   2.0   62.00    3\n",
       "3        Lingadheeranahalli      1521.0   3.0   95.00    3\n",
       "4                  Kothanur      1200.0   2.0   51.00    2\n",
       "6          Old Airport Road      2732.0   4.0  204.00    4"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop([\"price_per_sqft\"], axis=1, inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0afe0a2",
   "metadata": {
    "papermill": {
     "duration": 0.020699,
     "end_time": "2024-05-17T00:40:43.220437",
     "exception": false,
     "start_time": "2024-05-17T00:40:43.199738",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ML model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be8fcb6a",
   "metadata": {
    "papermill": {
     "duration": 0.022423,
     "end_time": "2024-05-17T00:40:43.264378",
     "exception": false,
     "start_time": "2024-05-17T00:40:43.241955",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**One Hot encoding**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c0cb8b5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:43.323005Z",
     "iopub.status.busy": "2024-05-17T00:40:43.322245Z",
     "iopub.status.idle": "2024-05-17T00:40:43.354439Z",
     "shell.execute_reply": "2024-05-17T00:40:43.353178Z"
    },
    "papermill": {
     "duration": 0.066588,
     "end_time": "2024-05-17T00:40:43.357113",
     "exception": false,
     "start_time": "2024-05-17T00:40:43.290525",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Devarachikkanahalli</th>\n",
       "      <th>1st Block Jayanagar</th>\n",
       "      <th>1st Block Koramangala</th>\n",
       "      <th>1st Phase JP Nagar</th>\n",
       "      <th>2nd Phase Judicial Layout</th>\n",
       "      <th>2nd Stage Nagarbhavi</th>\n",
       "      <th>5th Block Hbr Layout</th>\n",
       "      <th>5th Phase JP Nagar</th>\n",
       "      <th>6th Phase JP Nagar</th>\n",
       "      <th>7th Phase JP Nagar</th>\n",
       "      <th>...</th>\n",
       "      <th>Vijayanagar</th>\n",
       "      <th>Vishveshwarya Layout</th>\n",
       "      <th>Vishwapriya Layout</th>\n",
       "      <th>Vittasandra</th>\n",
       "      <th>Whitefield</th>\n",
       "      <th>Yelachenahalli</th>\n",
       "      <th>Yelahanka</th>\n",
       "      <th>Yelahanka New Town</th>\n",
       "      <th>Yelenahalli</th>\n",
       "      <th>Yeshwanthpur</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 251 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Devarachikkanahalli  1st Block Jayanagar  1st Block Koramangala  \\\n",
       "0                 False                False                  False   \n",
       "2                 False                False                  False   \n",
       "3                 False                False                  False   \n",
       "4                 False                False                  False   \n",
       "6                 False                False                  False   \n",
       "\n",
       "   1st Phase JP Nagar  2nd Phase Judicial Layout  2nd Stage Nagarbhavi  \\\n",
       "0               False                      False                 False   \n",
       "2               False                      False                 False   \n",
       "3               False                      False                 False   \n",
       "4               False                      False                 False   \n",
       "6               False                      False                 False   \n",
       "\n",
       "   5th Block Hbr Layout  5th Phase JP Nagar  6th Phase JP Nagar  \\\n",
       "0                 False               False               False   \n",
       "2                 False               False               False   \n",
       "3                 False               False               False   \n",
       "4                 False               False               False   \n",
       "6                 False               False               False   \n",
       "\n",
       "   7th Phase JP Nagar  ...  Vijayanagar  Vishveshwarya Layout  \\\n",
       "0               False  ...        False                 False   \n",
       "2               False  ...        False                 False   \n",
       "3               False  ...        False                 False   \n",
       "4               False  ...        False                 False   \n",
       "6               False  ...        False                 False   \n",
       "\n",
       "   Vishwapriya Layout  Vittasandra  Whitefield  Yelachenahalli  Yelahanka  \\\n",
       "0               False        False       False           False      False   \n",
       "2               False        False       False           False      False   \n",
       "3               False        False       False           False      False   \n",
       "4               False        False       False           False      False   \n",
       "6               False        False       False           False      False   \n",
       "\n",
       "   Yelahanka New Town  Yelenahalli  Yeshwanthpur  \n",
       "0               False        False         False  \n",
       "2               False        False         False  \n",
       "3               False        False         False  \n",
       "4               False        False         False  \n",
       "6               False        False         False  \n",
       "\n",
       "[5 rows x 251 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dummies = pd.get_dummies(df.location)\n",
    "dummies.drop(\"other\", axis=1, inplace=True) # since we can drop one column after one hot encoding\n",
    "dummies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b943f5bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:43.416072Z",
     "iopub.status.busy": "2024-05-17T00:40:43.415651Z",
     "iopub.status.idle": "2024-05-17T00:40:43.425417Z",
     "shell.execute_reply": "2024-05-17T00:40:43.424094Z"
    },
    "papermill": {
     "duration": 0.042529,
     "end_time": "2024-05-17T00:40:43.428395",
     "exception": false,
     "start_time": "2024-05-17T00:40:43.385866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8157"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.concat([df,dummies], axis=1)\n",
    "df.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "5e0be67d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:43.480356Z",
     "iopub.status.busy": "2024-05-17T00:40:43.479912Z",
     "iopub.status.idle": "2024-05-17T00:40:43.487215Z",
     "shell.execute_reply": "2024-05-17T00:40:43.486327Z"
    },
    "papermill": {
     "duration": 0.033273,
     "end_time": "2024-05-17T00:40:43.489792",
     "exception": false,
     "start_time": "2024-05-17T00:40:43.456519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "X = df.drop([\"price\", \"location\"], axis=1)\n",
    "y = df.price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "49b0789f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:43.537078Z",
     "iopub.status.busy": "2024-05-17T00:40:43.536215Z",
     "iopub.status.idle": "2024-05-17T00:40:43.811929Z",
     "shell.execute_reply": "2024-05-17T00:40:43.810732Z"
    },
    "papermill": {
     "duration": 0.302178,
     "end_time": "2024-05-17T00:40:43.815092",
     "exception": false,
     "start_time": "2024-05-17T00:40:43.512914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "dc1b5923",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:43.860732Z",
     "iopub.status.busy": "2024-05-17T00:40:43.860315Z",
     "iopub.status.idle": "2024-05-17T00:40:44.211243Z",
     "shell.execute_reply": "2024-05-17T00:40:44.210087Z"
    },
    "papermill": {
     "duration": 0.378259,
     "end_time": "2024-05-17T00:40:44.215204",
     "exception": false,
     "start_time": "2024-05-17T00:40:43.836945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8753687972463499"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "lr_model = LinearRegression()\n",
    "lr_model.fit(X_train, y_train)\n",
    "lr_model.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "38a8eee3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:44.337754Z",
     "iopub.status.busy": "2024-05-17T00:40:44.337369Z",
     "iopub.status.idle": "2024-05-17T00:40:45.436595Z",
     "shell.execute_reply": "2024-05-17T00:40:45.435067Z"
    },
    "papermill": {
     "duration": 1.138704,
     "end_time": "2024-05-17T00:40:45.440644",
     "exception": false,
     "start_time": "2024-05-17T00:40:44.301940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 8.42404870e-01, -6.42860695e+12,  8.55670648e-01,  8.78425569e-01,\n",
       "        8.46402684e-01])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n",
    "cross_val_score(LinearRegression(), X, y, cv=cv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "432df908",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:45.551878Z",
     "iopub.status.busy": "2024-05-17T00:40:45.551494Z",
     "iopub.status.idle": "2024-05-17T00:40:56.337446Z",
     "shell.execute_reply": "2024-05-17T00:40:56.336238Z"
    },
    "papermill": {
     "duration": 10.821975,
     "end_time": "2024-05-17T00:40:56.340161",
     "exception": false,
     "start_time": "2024-05-17T00:40:45.518186",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>best_scores</th>\n",
       "      <th>best_params</th>\n",
       "      <th>best model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Linear Regression</td>\n",
       "      <td>0.861558</td>\n",
       "      <td>{'copy_X': True, 'fit_intercept': True}</td>\n",
       "      <td>LinearRegression()</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lasso Regression</td>\n",
       "      <td>0.861690</td>\n",
       "      <td>{'alpha': 0.001}</td>\n",
       "      <td>Lasso(alpha=0.001)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.836515</td>\n",
       "      <td>{'max_depth': 8}</td>\n",
       "      <td>DecisionTreeRegressor(max_depth=8)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               model  best_scores                              best_params  \\\n",
       "0  Linear Regression     0.861558  {'copy_X': True, 'fit_intercept': True}   \n",
       "1   Lasso Regression     0.861690                         {'alpha': 0.001}   \n",
       "2      Decision Tree     0.836515                         {'max_depth': 8}   \n",
       "\n",
       "                           best model  \n",
       "0                  LinearRegression()  \n",
       "1                  Lasso(alpha=0.001)  \n",
       "2  DecisionTreeRegressor(max_depth=8)  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "def find_best_model_using_gridsearchcv(X,y):\n",
    "    models = {\n",
    "        'Linear Regression': {\n",
    "            'model': LinearRegression(),\n",
    "            'param_grid': {\n",
    "                'fit_intercept': [True, False],\n",
    "                'copy_X':[True, False]\n",
    "            }  # Example grid for LinearRegression\n",
    "            },\n",
    "        'Lasso Regression': {\n",
    "            'model': Lasso(),\n",
    "            'param_grid': {'alpha': [0.0001, 0.001, 0.1]}  # Regularization parameter for Lasso\n",
    "            },\n",
    "        'Decision Tree': {\n",
    "            'model': DecisionTreeRegressor(),\n",
    "            'param_grid': {'max_depth': [3, 5, 8]}  # Maximum depth for Decision Tree\n",
    "            }\n",
    "    }\n",
    "    scores = []\n",
    "    for algo_name, config in models.items():\n",
    "        gs = GridSearchCV(config['model'],config[\"param_grid\"], cv=5) # cv=5 mean 4/5 for traning, 1/5 for cross validation\n",
    "        gs.fit(X,y)\n",
    "        scores.append({\n",
    "            'model':algo_name,\n",
    "            \"best_scores\":gs.best_score_,\n",
    "            \"best_params\":gs.best_params_,\n",
    "            \"best model\":gs.best_estimator_\n",
    "        })\n",
    "    return pd.DataFrame(scores, columns=[\"model\",\"best_scores\",\"best_params\",\"best model\"])\n",
    "\n",
    "find_best_model_using_gridsearchcv(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "1b7e07fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:56.388083Z",
     "iopub.status.busy": "2024-05-17T00:40:56.387670Z",
     "iopub.status.idle": "2024-05-17T00:40:56.395453Z",
     "shell.execute_reply": "2024-05-17T00:40:56.394317Z"
    },
    "papermill": {
     "duration": 0.034159,
     "end_time": "2024-05-17T00:40:56.397774",
     "exception": false,
     "start_time": "2024-05-17T00:40:56.363615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['total_sqft', 'bath', 'bhk', ' Devarachikkanahalli',\n",
       "       '1st Block Jayanagar', '1st Block Koramangala', '1st Phase JP Nagar',\n",
       "       '2nd Phase Judicial Layout', '2nd Stage Nagarbhavi',\n",
       "       '5th Block Hbr Layout',\n",
       "       ...\n",
       "       'Vijayanagar', 'Vishveshwarya Layout', 'Vishwapriya Layout',\n",
       "       'Vittasandra', 'Whitefield', 'Yelachenahalli', 'Yelahanka',\n",
       "       'Yelahanka New Town', 'Yelenahalli', 'Yeshwanthpur'],\n",
       "      dtype='object', length=254)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a5b7770c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:56.444221Z",
     "iopub.status.busy": "2024-05-17T00:40:56.443531Z",
     "iopub.status.idle": "2024-05-17T00:40:56.457297Z",
     "shell.execute_reply": "2024-05-17T00:40:56.456226Z"
    },
    "papermill": {
     "duration": 0.03972,
     "end_time": "2024-05-17T00:40:56.459525",
     "exception": false,
     "start_time": "2024-05-17T00:40:56.419805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "99.65937930710236"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.where(X.columns==\"Vijayanagar\")[0][0]\n",
    "def predict_price(location, sqft, bath, bhk):\n",
    "    loc_index = np.where(X.columns==location)[0][0]\n",
    "    x = np.zeros(len(X.columns))\n",
    "    x[0] = sqft\n",
    "    x[1] = bath\n",
    "    x[2] = bhk\n",
    "    x[loc_index] = 1\n",
    "    \n",
    "    return lr_model.predict([x])[0]\n",
    "\n",
    "predict_price(\"Vijayanagar\", 1500, 4, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "1c520f9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:56.507224Z",
     "iopub.status.busy": "2024-05-17T00:40:56.505848Z",
     "iopub.status.idle": "2024-05-17T00:40:56.520119Z",
     "shell.execute_reply": "2024-05-17T00:40:56.519231Z"
    },
    "papermill": {
     "duration": 0.040246,
     "end_time": "2024-05-17T00:40:56.522459",
     "exception": false,
     "start_time": "2024-05-17T00:40:56.482213",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bhk</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7667</th>\n",
       "      <td>125.0</td>\n",
       "      <td>5</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      price  bhk  total_sqft  bath\n",
       "7667  125.0    5      2400.0   6.0"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df.Vijayanagar==1) & (df.bhk>3)][[\"price\",\"bhk\", \"total_sqft\",\"bath\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "de5edb19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:56.570772Z",
     "iopub.status.busy": "2024-05-17T00:40:56.570049Z",
     "iopub.status.idle": "2024-05-17T00:40:56.575465Z",
     "shell.execute_reply": "2024-05-17T00:40:56.574350Z"
    },
    "papermill": {
     "duration": 0.032369,
     "end_time": "2024-05-17T00:40:56.577876",
     "exception": false,
     "start_time": "2024-05-17T00:40:56.545507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pickle\n",
    "with open(\"bangalore_home_prices_model.pickle\", \"wb\") as f:\n",
    "    pickle.dump(lr_model,f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "11b24da1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T00:40:56.624907Z",
     "iopub.status.busy": "2024-05-17T00:40:56.624477Z",
     "iopub.status.idle": "2024-05-17T00:40:56.631119Z",
     "shell.execute_reply": "2024-05-17T00:40:56.630085Z"
    },
    "papermill": {
     "duration": 0.03284,
     "end_time": "2024-05-17T00:40:56.633468",
     "exception": false,
     "start_time": "2024-05-17T00:40:56.600628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import json\n",
    "columns = {\n",
    "    \"data_columns\":[col.lower() for col in X.columns]\n",
    "}\n",
    "with open(\"columns.json\",\"w\") as f:\n",
    "    f.write(json.dumps(columns))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2124944,
     "sourceId": 3532655,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 23.277589,
   "end_time": "2024-05-17T00:40:57.277399",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-17T00:40:33.999810",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
